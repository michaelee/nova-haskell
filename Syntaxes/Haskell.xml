<?xml version="1.0" encoding="UTF-8"?>
<syntax name="haskell">
    <meta>
        <name>Haskell</name>
        <type>compiled</type>
        <preferred-file-extension>hs</preferred-file-extension>
    </meta>

    <detectors>
        <extension priority="1.0">hs</extension>
    </detectors>

    <comments>
        <single>
            <expression>--</expression>
        </single>
        <multiline>
            <starts-with>
                <expression>{-</expression>
            </starts-with>
            <ends-with>
                <expression>-}</expression>
            </ends-with>
        </multiline>
    </comments>

    <brackets>
        <pair open="{" close="}" />
		<pair open="[" close="]" />
		<pair open="(" close=")" />
    </brackets>

    <surrounding-pairs>
        <pair open="[" close="]" />
        <pair open="(" close=")" />
        <pair open="&apos;" close="&apos;" />
        <pair open="&quot;" close="&quot;" />
        <pair open="`" close="`" />
    </surrounding-pairs>

	<indentation>
		<increase>
			<expression>
                (case|class|do|let|where).*
            </expression>
		</increase>
		<decrease>
			<expression>^\\s*(end|done|with|in|else)\\b|^\\s*;;</expression>
		</decrease>
	</indentation>


    <scopes>
        <include syntax="self" collection="comments" />
        <include syntax="self" collection="classes" />
        <include syntax="self" collection="instances" />
        <include syntax="self" collection="keywords" />
        <include syntax="self" collection="types" />
        <include syntax="self" collection="functions" />
    </scopes>

    <collections>
        <!-- Comments -->
        <collection name="comments">
            <scope name="haskell.comment.single" spell-check="true">
                <expression>--(.*)$</expression>
            </scope>
            <scope name="haskell.comment.block" spell-check="true">
                <starts-with>
                    <expression>{-</expression>
                </starts-with>
                <ends-with>
                    <expression>-}</expression>
                </ends-with>
            </scope>
        </collection>

        <!-- Strings -->
        <collection name="strings">
            <scope name="haskell.string.double-quoted">
                <expression>"([^\\"]|\\.)*"</expression>
            </scope>
            <scope name="haskell.string.single-quoted">
                <expression>'([^'\\]|\\.)'</expression>
            </scope>
        </collection>

        <!-- Types -->
        <collection name="types">
            <scope name="haskell.type">
              	<symbol type="type" scope="global">
              	    <context behavior="subtree" />
                </symbol>

                <starts-with>
                    <expression>
                        ^(?| ([a-z][a-zA-Z0-9_']*) | \((\S+)\) ) \s+ ::
                    </expression>
                    <capture number="1" name="haskell.identifier.variable.name" />
                </starts-with>
                <ends-with>
                    <expression>(?=^\S)</expression>
                </ends-with>
                <subscopes>
                    <scope name="haskell.type">
                        <symbol type="type" scope="global" />
                        <expression>
                            (\b[A-Z][a-zA-Z0-9_']*)
                        </expression>
                        <capture number="1" name="haskell.identifier.type.name" />
                    </scope>
                    <include syntax="self" collection="comments" />
                </subscopes>
            </scope>
        </collection>

        <!-- Functions -->
        <collection name="functions">
            <scope name="haskell.function.block">
            	<symbol type="function" scope="global">
            		<context behavior="subtree" />
	            </symbol>

                <starts-with>
                    <expression>
                        ^(?| [^=]* `([a-z][a-zA-Z0-9_']+)` [^=]*
                          |  \(([!@#$%+^*:&amp;&lt;&gt;?/\-]+)\) [^=]*
                          |  [^=\s]*? \s+ ([!@#$%+^*:&amp;&lt;&gt;?/\-]+) [^=]*
                          |  (?:[a-z][a-zA-Z0-9_']*) ([!@#$%+^*:&amp;&lt;&gt;?/\-]+) (?:[a-z][a-zA-Z0-9_']*) [^=]*
                          |  ([a-z][a-zA-Z0-9_']*) [^`=]*
                          ) =
                    </expression>
                    <capture number="1" name="haskell.identifier.function.name" />
                </starts-with>
                <ends-with>
                    <expression>(?=^\S)</expression>
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="comments"/>
                    <include syntax="self" collection="keywords"/>
                    <include syntax="self" collection="strings" />
                </subscopes>
            </scope>
        </collection>

        <collection name="modules">
            <scope name="haskell.definition.package">
                <expression>
                    ^(module)\s+([A-Z][a-zA-Z0-9_']*).+(where)
                </expression>
                <capture number="1" name="haskell.keyword.module" />
                <capture number="2" name="haskell.identifier.package.name" />
                <capture number="3" name="haskell.keyword.where" />
            </scope>
        </collection>

        <collection name="imports">
            <scope name="haskell.package.import">
                <expression>
                    ^(import).+
                </expression>
                <capture number="1" name="haskell.keyword.module" />
            </scope>
        </collection>

        <collection name="classes">
            <scope name="haskell.category">
                <symbol type="class" scope="global" />
                <starts-with>
                    <expression>
                        ^(class)
                        \s+ (?:(?:[A-Z][a-zA-Z0-9_']*) .*? => \s+)*
                        ([A-Z][a-zA-Z0-9_']*) .+
                        (where)
                    </expression>
                    <capture number="1" name="haskell.keyword.class" />
                    <capture number="2" name="haskell.identifier.category.name" />
                    <capture number="3" name="haskell.keyword.where" />
                </starts-with>
                <ends-with>
                    <expression>(?=^\S)</expression>
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="comments"/>
                    <include syntax="self" collection="keywords"/>
                    <include syntax="self" collection="strings" />
                </subscopes>
            </scope>
        </collection>

        <collection name="instances">
            <scope name="haskell.category">
                <starts-with>
                    <expression>
                        ^(instance).+(where)
                    </expression>
                    <capture number="1" name="haskell.keyword.instance" />
                    <capture number="2" name="haskell.keyword.where" />
                </starts-with>
                <ends-with>
                    <expression>(?=^\S)</expression>
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="comments"/>
                    <include syntax="self" collection="keywords"/>
                    <include syntax="self" collection="strings" />
                </subscopes>
            </scope>
        </collection>


        <!-- Keywords -->
        <collection name="keywords">
            <scope name="haskell.keyword">
                <symbol type="keyword" />
                <strings>
                    <string>case</string>
                    <string>class</string>
                    <string>data</string>
                    <string>deriving</string>
                    <string>do</string>
                    <string>else</string>
                    <string>if</string>
                    <string>import</string>
                    <string>in</string>
                    <string>infix</string>
                    <string>infixl</string>
                    <string>infixr</string>
                    <string>instance</string>
                    <string>let</string>
                    <string>of</string>
                    <string>module</string>
                    <string>newtype</string>
                    <string>then</string>
                    <string>type</string>
                    <string>undefined</string>
                    <string>where</string>
                </strings>
            </scope>
        </collection>
    </collections>
</syntax>
